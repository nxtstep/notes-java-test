// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 'git rev-list HEAD --count'.execute([], project.rootDir).text.trim().toInteger()

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.2"

	packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/rxjava.properties'
    }
    
    defaultConfig {
        applicationId "io.supersimple.notes"
        minSdkVersion 21
        targetSdkVersion 24
        versionCode versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        
        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"
        buildConfigField 'boolean', 'GIT_CLEAN', "${gitIsClean()}"
        buildConfigField 'String', 'GIT_LOCAL_REF', "\"${gitLocalRef()}\""
        buildConfigField 'String', 'BUILD_TIME', "\"${buildTime()}\""
        
        if (travisBuild) {
            buildConfigField 'String', 'TRAVIS_BUILD_NR', '\"' + System.getenv("TRAVIS_BUILD_NUMBER") + '\"'
        }
        
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    
	dataBinding {
		enabled true
	}

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    
    lintOptions {
        textReport true
        textOutput 'stdout'
        warning 'MissingTranslation'
    }
    
    signingConfigs {
        release {
            storeFile rootProject.file("notes-release.keystore")
            storePassword System.getenv("KSTOREPWD")
            keyAlias "notes-app"
            keyPassword System.getenv("KEYPWD")
        }
    }
    
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        qa {
            applicationIdSuffix '.qa'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            signingConfig signingConfigs.release
        }
    }
    
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    
    compile "com.android.support:appcompat-v7:$rootProject.ext.androidSupportVersion"
    compile "com.android.support:design:$rootProject.ext.androidSupportVersion"
    //
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
    //
    // SuperSimple
    compile "org.bitbucket.nxtapp.supersimpleandroid:simple-ui:$rootProject.ext.supersimpleVersion"
    
    //
    // Test-only dependencies
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestCompile "com.android.support:support-annotations:$rootProject.ext.androidSupportVersion"
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.androidSupportTest"
    // Set this dependency to use JUnit 4 rules
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.androidSupportTest"
    // Espresso
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoTestVersion"
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoTestVersion") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoTestVersion"
    
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    //
    // UnitTest with Robolectric
    testCompile ("org.robolectric:robolectric:$rootProject.ext.robolectricVersion") {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
}

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		//
    	// Kotlin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$rootProject.ext.kotlinVersion"
	}
}

dexcount {
    format = "list"
    includeClasses = false
    includeFieldCount = true
    includeTotalMethodCount = false
    orderByMethodCount = false
    verbose = false
    maxTreeDepth = Integer.MAX_VALUE
    teamCityIntegration = false
    enableForInstantRun = false
    teamCitySlug = null
    runOnEachAssemble = true
}
